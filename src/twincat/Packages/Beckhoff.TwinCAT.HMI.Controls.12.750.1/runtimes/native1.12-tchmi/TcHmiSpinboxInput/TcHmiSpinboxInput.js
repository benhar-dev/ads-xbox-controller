var TcHmi;!function(TcHmi){let Controls;!function(Controls){let Beckhoff;!function(Beckhoff){class TcHmiSpinboxInput extends TcHmi.Controls.Beckhoff.TcHmiNumericInput{constructor(element,pcElement,attrs){super(element,pcElement,attrs),this.__locked=!1,this.__onResolverForInputBackgroundColorWatchCallback=data=>{!1===this.__isAttached&&this.__suspendObjectResolver("inputBackgroundColor"),data.error===TcHmi.Errors.NONE?tchmi_equal(data.value,this.__inputBackgroundColor)||(this.__inputBackgroundColor=data.value,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"InputBackgroundColor"}),this.__processInputBackgroundColor()):TCHMI_CONSOLE_LOG_LEVEL>=1&&TcHmi.Log.error("[Source=Control, Module=TcHmi.Controls.Beckhoff.TcHmiSpinboxInput, Id="+this.getId()+", Attribute=InputBackgroundColor] Resolving symbols from object failed with error: "+TcHmi.Log.buildMessage(data.details))},this.__evtHandlerMouseClickPlus=this.__onButtonPlus(),this.__evtHandlerMouseClickMinus=this.__onButtonMinus()}__previnit(){if(super.__previnit(),this.__elementButtonContainerLeft=this.__elementTemplateRoot.getElementsByClassName("TcHmi_Controls_Beckhoff_TcHmiSpinboxInput-template-button-before")[0],this.__elementButtonContainerRight=this.__elementTemplateRoot.getElementsByClassName("TcHmi_Controls_Beckhoff_TcHmiSpinboxInput-template-button-after")[0],!this.__elementButtonContainerLeft||!this.__elementButtonContainerRight)throw new Error("Invalid Template.html")}__init(){super.__init()}__attach(){super.__attach();const passiveEventOptions=!!TCHMI_EVENT_OPTION_OBJECT_SUPPORTED&&{passive:!0,capture:!1};this.__buttonPlus&&this.__buttonPlus.addEventListener("click",this.__evtHandlerMouseClickPlus,passiveEventOptions),this.__buttonMinus&&this.__buttonMinus.addEventListener("click",this.__evtHandlerMouseClickMinus,passiveEventOptions)}__detach(){super.__detach();const passiveEventOptions=!!TCHMI_EVENT_OPTION_OBJECT_SUPPORTED&&{passive:!0,capture:!1};this.__buttonPlus&&this.__buttonPlus.removeEventListener("click",this.__evtHandlerMouseClickPlus,passiveEventOptions),this.__buttonMinus&&this.__buttonMinus.removeEventListener("click",this.__evtHandlerMouseClickMinus,passiveEventOptions)}destroy(){this.__keepAlive||super.destroy()}__createAndAppendButtons(){switch(this.__buttonPlus||(this.__buttonPlus=document.createElement("div"),this.__buttonPlus.classList.add("button","button-plus")),this.__buttonMinus||(this.__buttonMinus=document.createElement("div"),this.__buttonMinus.classList.add("button","button-minus")),this.__buttonPosition){case"BothLeft":this.__elementButtonContainerLeft.append(this.__buttonPlus,this.__buttonMinus),this.__elementButtonContainerLeft.classList.add("used"),this.__elementButtonContainerRight.classList.remove("used"),this.__buttonPlus.style.height="50%",this.__buttonMinus.style.height="50%";break;case"PlusLeftAndMinusRight":this.__elementButtonContainerLeft.append(this.__buttonPlus),this.__elementButtonContainerRight.append(this.__buttonMinus),this.__elementButtonContainerLeft.classList.add("used"),this.__elementButtonContainerRight.classList.add("used"),this.__buttonPlus.style.height="100%",this.__buttonMinus.style.height="100%";break;case"BothRight":this.__elementButtonContainerRight.append(this.__buttonPlus,this.__buttonMinus),this.__elementButtonContainerLeft.classList.remove("used"),this.__elementButtonContainerRight.classList.add("used"),this.__buttonPlus.style.height="50%",this.__buttonMinus.style.height="50%";break;default:this.__elementButtonContainerLeft.append(this.__buttonMinus),this.__elementButtonContainerRight.append(this.__buttonPlus),this.__elementButtonContainerLeft.classList.add("used"),this.__elementButtonContainerRight.classList.add("used"),this.__buttonPlus.style.height="100%",this.__buttonMinus.style.height="100%"}}__onButtonPlus(){return()=>{if(null!==this.__value&&void 0!==this.__value){let newValue;if(Number(this.__elementInput.value)!==this.__value)return void this.__processValue();newValue=void 0===this.__step?this.__value+1:this.__value+this.__step,null!==this.__internalMaxValue&&void 0!==this.__internalMaxValue&&(newValue=newValue>this.__internalMaxValue?this.__value:newValue),null!==this.__internalMinValue&&void 0!==this.__internalMinValue&&(newValue=newValue<this.__internalMinValue?this.__value:newValue),this.__setValue(newValue)}else void 0!==this.__lastValidValue?this.__setValue(this.__lastValidValue):null!==this.__internalMinValue&&void 0!==this.__internalMinValue?this.__setValue(this.__internalMinValue):null!==this.__internalMaxValue&&void 0!==this.__internalMaxValue?this.__setValue(this.__internalMaxValue):this.__setValue(0)}}__onButtonMinus(){return()=>{if(null!==this.__value&&void 0!==this.__value){let newValue;if(Number(this.__elementInput.value)!==this.__value)return void this.__processValue();newValue=void 0===this.__step?this.__value-1:this.__value-this.__step,null!==this.__internalMaxValue&&void 0!==this.__internalMaxValue&&(newValue=newValue>this.__internalMaxValue?this.__value:newValue),null!==this.__internalMinValue&&void 0!==this.__internalMinValue&&(newValue=newValue<this.__internalMinValue?this.__value:newValue),this.__setValue(newValue)}else void 0!==this.__lastValidValue?this.__setValue(this.__lastValidValue):null!==this.__internalMinValue&&void 0!==this.__internalMinValue?this.__setValue(this.__internalMinValue):null!==this.__internalMaxValue&&void 0!==this.__internalMaxValue?this.__setValue(this.__internalMaxValue):this.__setValue(0)}}setStep(valueNew){let convertedValue=TcHmi.ValueConverter.toNumber(valueNew);null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("Step")),convertedValue!==this.__step&&(this.__step=convertedValue,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"Step"}),this.__processStep())}getStep(){return this.__step}__processStep(){}setButtonPosition(valueNew){let convertedValue=TcHmi.ValueConverter.toString(valueNew);if(null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("ButtonPosition")),convertedValue!==this.__buttonPosition){switch(convertedValue){case"BothLeft":case"PlusLeftAndMinusRight":case"BothRight":this.__buttonPosition=convertedValue;break;default:this.__buttonPosition="MinusLeftAndPlusRight"}TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"ButtonPosition"}),this.__processButtonPosition()}}getButtonPosition(){return this.__buttonPosition}__processButtonPosition(){this.__createAndAppendButtons()}setInputBackgroundColor(valueNew){let convertedValue=TcHmi.ValueConverter.toObject(valueNew);null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("InputBackgroundColor"));let resolverInfo=this.__objectResolvers.get("inputBackgroundColor");resolverInfo&&(resolverInfo.watchDestroyer&&resolverInfo.watchDestroyer(),resolverInfo.resolver.destroy());let resolver=new TcHmi.Symbol.ObjectResolver(convertedValue);this.__objectResolvers.set("inputBackgroundColor",{resolver:resolver,watchCallback:this.__onResolverForInputBackgroundColorWatchCallback,watchDestroyer:resolver.watch(this.__onResolverForInputBackgroundColorWatchCallback)})}getInputBackgroundColor(){return this.__inputBackgroundColor}__processInputBackgroundColor(){TcHmi.StyleProvider.processBackgroundColor(this.__elementInput,this.__inputBackgroundColor)}}Beckhoff.TcHmiSpinboxInput=TcHmiSpinboxInput}(Beckhoff=Controls.Beckhoff||(Controls.Beckhoff={}))}(Controls=TcHmi.Controls||(TcHmi.Controls={}))}(TcHmi||(TcHmi={})),TcHmi.Controls.registerEx("TcHmiSpinboxInput","TcHmi.Controls.Beckhoff",TcHmi.Controls.Beckhoff.TcHmiSpinboxInput);