{
    "$schema": "../TcHmiFramework/Schema/FunctionDescription.Schema.json",
    "apiVersion": 1,
    "version": {
        "full": "1.12.750.1",
        "major": 1,
        "minor": 12,
        "build": 750,
        "revision": 1
    },
    "dependencyFiles": [
        {
            "name": "Decrement.js",
            "type": "JavaScript",
            "description": ""
        }
    ],
    "function": {
        "name": "Decrement",
        "namespace": "TcHmi.Functions.Beckhoff",
        "displayName": "Decrement",
        "visible": true,
        "description": "Decrement a binding value.",
        "category": "Data Conversion",
        "injectContextObject": true,
        "waitMode": "Asynchronous",
        "returnValue": null,
        "arguments": [
            {
                "name": "ctx",
                "displayName": "ctx",
                "type": "tchmi:framework#/definitions/ContextReference",
                "description": "Context Reference",
                "required": true,
                "bindable": false
            },
            {
                "name": "value",
                "displayName": "value",
                "type": "tchmi:framework#/definitions/TcHmi.Functions.Beckhoff.Decrement.DecrementValueSymbol",
                "description": "Value to be decremented",
                "required": true,
                "bindable": true
            },
            {
                "name": "minValue",
                "displayName": "minValue",
                "type": "tchmi:general#/definitions/Number",
                "description": "Minimum value(inclusive) to which the symbol will decremented",
                "required": false,
                "bindable": true
            },
            {
                "name": "stepWidth",
                "displayName": "stepWidth",
                "type": "tchmi:general#/definitions/Number",
                "description": "Used stepwidth for decrement",
                "required": false,
                "bindable": true
            }
        ]
    },
    "dataTypes": [
        {
            "schema": "Schema/Types.Schema.json"
        }
    ]
}